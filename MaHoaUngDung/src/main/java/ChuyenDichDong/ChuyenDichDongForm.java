/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ChuyenDichDong;

import java.util.ArrayList;
import java.util.Arrays;

/**
 *
 * @author buile
 */
public class ChuyenDichDongForm extends javax.swing.JFrame {

    /**
     * Creates new form ChuyenDichDongForm
     */
    public ChuyenDichDongForm() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnDecryption = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        txtKeyDecryption = new javax.swing.JTextField();
        btnEncryption = new javax.swing.JButton();
        lblKeyEncryption = new javax.swing.JLabel();
        txtKeyEncryption = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        tareaEcryption = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        tereaDecryption = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        btnDecryption.setText("Decryption");
        btnDecryption.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDecryptionActionPerformed(evt);
            }
        });

        jLabel2.setText("Key");

        btnEncryption.setText("Encryption");
        btnEncryption.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEncryptionActionPerformed(evt);
            }
        });

        lblKeyEncryption.setText("Key");

        txtKeyEncryption.setName("txtKeyEncryption"); // NOI18N

        tareaEcryption.setColumns(20);
        tareaEcryption.setRows(5);
        jScrollPane1.setViewportView(tareaEcryption);

        tereaDecryption.setColumns(20);
        tereaDecryption.setRows(5);
        jScrollPane2.setViewportView(tereaDecryption);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane2)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 376, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(lblKeyEncryption))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 36, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtKeyEncryption)
                            .addComponent(txtKeyDecryption)
                            .addComponent(btnEncryption, javax.swing.GroupLayout.DEFAULT_SIZE, 104, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnDecryption, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(32, 32, 32))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblKeyEncryption)
                            .addComponent(txtKeyEncryption, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(33, 33, 33)
                        .addComponent(btnEncryption)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 82, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(22, 22, 22))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtKeyDecryption, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2))
                        .addGap(31, 31, 31)
                        .addComponent(btnDecryption)
                        .addGap(30, 30, 30))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnDecryptionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDecryptionActionPerformed
        try
        {
        String keyDecryption =   txtKeyDecryption.getText().replaceAll("\\s", "");
        String cipherText =  tereaDecryption.getText().replaceAll("\\s", "");
        if(checkInput(keyDecryption, cipherText)) {
            String[] arraylainText = {};
            arraylainText=Decryption(keyDecryption, cipherText, arraylainText);
            String plainText="";
            for (String str : arraylainText) {
                 plainText += str;
            }    
            tareaEcryption.setText(plainText);
        }
        else
        {
            System.out.println("CipherText Hoac Key Giai Ma Sai");
        }
        }
    
         catch(Exception  e){
         System.out.println("Vui long nhap day du thong tin");
       }
        
    }//GEN-LAST:event_btnDecryptionActionPerformed
     
    private boolean checkInput(String keyDecryption,String cipherText)
    {
        
             if (cipherText.length()%keyDecryption.length()!=0 || cipherText.length()/keyDecryption.length() < keyDecryption.length())       
                 return false;
            
             else
                 return true;
        
    }
  
    private String[] Decryption(String keyDecryption,String cipherText,String[] s)
    {
        String sortCipherText= sortCipherText(keyDecryption, cipherText, s);
        int step = cipherText.length()/keyDecryption.length();
        String[] arrayPlainText = {};  
        for (int i = 1; i < step; i++) {
            for (int indexStart = i; indexStart < cipherText.length(); indexStart+=step) {
                arrayPlainText =insertElement(arrayPlainText, sortCipherText.substring(indexStart,indexStart+1), arrayPlainText.length);
            }
        }
        return arrayPlainText;
    }
     private String sortCipherText(String keyDecryption,String cipherText,String[] arrayCipherText)
    {
        arrayCipherText = splitSubString(keyDecryption, cipherText, arrayCipherText);
        String plainText="";
        int numberLoop = 0;
        while(numberLoop != keyDecryption.length())
        {
            for (int j = 0; j < keyDecryption.length(); j++) {
                  String partCipherText = arrayCipherText[j];
                  String firstpartCipherText = partCipherText.substring(0,1);
             if(Character.toString(keyDecryption.charAt(numberLoop)).startsWith(firstpartCipherText))
            {
                plainText=plainText+partCipherText;
                break;
            }
            }          
            numberLoop++;
        }
        return plainText;
    }
    
     private String[] splitSubString(String keyDecryption,String cipherText,String[] arrayCipherText)
    {
        int step = cipherText.length()/keyDecryption.length();
        int indexEnd = step;
        int numberSubString=keyDecryption.length();
        int i = 0;
        int indexStart = 0;
         while (i != numberSubString) {
             arrayCipherText= insertElement(arrayCipherText, cipherText.substring(indexStart, indexEnd), arrayCipherText.length);
             indexStart+=step;
             indexEnd+=step;
             i++;
        } 
         return arrayCipherText;
    }

    private String[] Encryption(String keyEncryption,String plainText ,String[] s){   
        return s;
              
    }


   
     private static String[] insertElement(String original[],
     String element, int index) {
      int length = original.length;
      String destination[] = new String[length + 1];
      System.arraycopy(original, 0, destination, 0, index);
      destination[index] = element;
      System.arraycopy(original, index, destination, index
      + 1, length - index);
      return destination;
   }
   
   
    private void btnEncryptionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEncryptionActionPerformed
   
    }//GEN-LAST:event_btnEncryptionActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ChuyenDichDongForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ChuyenDichDongForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ChuyenDichDongForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ChuyenDichDongForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ChuyenDichDongForm().setVisible(true);
            }
        });
    }
    private String[] alphabet = {"a","b","c","d","e","f","g","h","i","j","k","l","m","n","o","p","q","r","s","t","u","v","w","x","y","z"};
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDecryption;
    private javax.swing.JButton btnEncryption;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblKeyEncryption;
    private javax.swing.JTextArea tareaEcryption;
    private javax.swing.JTextArea tereaDecryption;
    private javax.swing.JTextField txtKeyDecryption;
    private javax.swing.JTextField txtKeyEncryption;
    // End of variables declaration//GEN-END:variables
}
